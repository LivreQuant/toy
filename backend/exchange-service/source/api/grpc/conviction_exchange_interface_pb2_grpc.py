# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.grpc import conviction_exchange_interface_pb2 as main_dot_services_dot_conviction__exchange__interface__pb2


class ConvictionExchangeSimulatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitConvictions = channel.unary_unary(
                '/conviction_exchange.ConvictionExchangeSimulator/SubmitConvictions',
                request_serializer=main_dot_services_dot_conviction__exchange__interface__pb2.BatchConvictionRequest.SerializeToString,
                response_deserializer=main_dot_services_dot_conviction__exchange__interface__pb2.BatchConvictionResponse.FromString,
                )
        self.CancelConvictions = channel.unary_unary(
                '/conviction_exchange.ConvictionExchangeSimulator/CancelConvictions',
                request_serializer=main_dot_services_dot_conviction__exchange__interface__pb2.BatchCancelRequest.SerializeToString,
                response_deserializer=main_dot_services_dot_conviction__exchange__interface__pb2.BatchCancelResponse.FromString,
                )


class ConvictionExchangeSimulatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitConvictions(self, request, context):
        """Submit convictions in batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelConvictions(self, request, context):
        """Cancel convictions in batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConvictionExchangeSimulatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitConvictions': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitConvictions,
                    request_deserializer=main_dot_services_dot_conviction__exchange__interface__pb2.BatchConvictionRequest.FromString,
                    response_serializer=main_dot_services_dot_conviction__exchange__interface__pb2.BatchConvictionResponse.SerializeToString,
            ),
            'CancelConvictions': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelConvictions,
                    request_deserializer=main_dot_services_dot_conviction__exchange__interface__pb2.BatchCancelRequest.FromString,
                    response_serializer=main_dot_services_dot_conviction__exchange__interface__pb2.BatchCancelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'conviction_exchange.ConvictionExchangeSimulator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConvictionExchangeSimulator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitConvictions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conviction_exchange.ConvictionExchangeSimulator/SubmitConvictions',
            main_dot_services_dot_conviction__exchange__interface__pb2.BatchConvictionRequest.SerializeToString,
            main_dot_services_dot_conviction__exchange__interface__pb2.BatchConvictionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelConvictions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/conviction_exchange.ConvictionExchangeSimulator/CancelConvictions',
            main_dot_services_dot_conviction__exchange__interface__pb2.BatchCancelRequest.SerializeToString,
            main_dot_services_dot_conviction__exchange__interface__pb2.BatchCancelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
