#pragma version 10
#pragma typetrack false

// projects.trader.smart_contracts.trader_app.contract.BookContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 "params" "status" "address" 0x4e414e "book_hash" "research_hash" "user_id" "book_id" "ACTIVE"
    // trader_app/contract.py:15
    // class BookContract(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@12
    pushbytess 0x2325f9af 0x8789bcdb 0xabe79c1f 0x8af67f50 0xfa98abdf 0xa1d81bd3 0x20bef5f7 // method "initialize(byte[],byte[],byte[])uint64", method "opt_in()uint64", method "close_out()uint64", method "update_global(byte[],byte[],account,byte[])uint64", method "update_status(string)uint64", method "update_local(byte[],byte[],byte[])uint64", method "delete_application()uint64"
    txna ApplicationArgs 0
    match main_initialize_route@5 main_opt_in_route@6 main_close_out_route@7 main_update_global_route@8 main_update_status_route@9 main_update_local_route@10 main_delete_application_route@11

main_after_if_else@14:
    // trader_app/contract.py:15
    // class BookContract(ARC4Contract):
    intc_1 // 0
    return

main_delete_application_route@11:
    // trader_app/contract.py:163
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_application
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_update_local_route@10:
    // trader_app/contract.py:139
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // trader_app/contract.py:15
    // class BookContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    // trader_app/contract.py:139
    // @arc4.abimethod()
    callsub update_local
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_update_status_route@9:
    // trader_app/contract.py:129
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // trader_app/contract.py:15
    // class BookContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // trader_app/contract.py:129
    // @arc4.abimethod()
    callsub update_status
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_update_global_route@8:
    // trader_app/contract.py:101
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // trader_app/contract.py:15
    // class BookContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    txna ApplicationArgs 4
    extract 2 0
    // trader_app/contract.py:101
    // @arc4.abimethod()
    callsub update_global
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_close_out_route@7:
    // trader_app/contract.py:89
    // @arc4.abimethod(allow_actions=["CloseOut"])
    txn OnCompletion
    pushint 2 // CloseOut
    ==
    assert // OnCompletion is not CloseOut
    txn ApplicationID
    assert // can only call when not creating
    callsub close_out
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_opt_in_route@6:
    // trader_app/contract.py:75
    // @arc4.abimethod(allow_actions=["OptIn"])
    txn OnCompletion
    intc_0 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    callsub opt_in
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_initialize_route@5:
    // trader_app/contract.py:61
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // trader_app/contract.py:15
    // class BookContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    // trader_app/contract.py:61
    // @arc4.abimethod()
    callsub initialize
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@12:
    // trader_app/contract.py:15
    // class BookContract(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// projects.trader.smart_contracts.trader_app.contract.BookContract.initialize(user_id: bytes, book_id: bytes, parameters: bytes) -> uint64:
initialize:
    // trader_app/contract.py:61-62
    // @arc4.abimethod()
    // def initialize(self, user_id: Bytes, book_id: Bytes, parameters: Bytes) -> UInt64:
    proto 3 1
    // trader_app/contract.py:64-65
    // # Set global state
    // self.g_user_id.value = user_id
    bytec 7 // "user_id"
    frame_dig -3
    app_global_put
    // trader_app/contract.py:66
    // self.g_book_id.value = book_id
    bytec 8 // "book_id"
    frame_dig -2
    app_global_put
    // trader_app/contract.py:67
    // self.g_address.value = Account(
    bytec_3 // "address"
    // trader_app/contract.py:67-69
    // self.g_address.value = Account(
    //     "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"
    // )
    pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    app_global_put
    // trader_app/contract.py:70
    // self.g_params.value = parameters
    bytec_1 // "params"
    frame_dig -1
    app_global_put
    // trader_app/contract.py:71
    // self.g_status.value = String("INACTIVE-INIT")
    bytec_2 // "status"
    pushbytes "INACTIVE-INIT"
    app_global_put
    // trader_app/contract.py:73
    // return UInt64(1)
    intc_0 // 1
    retsub


// projects.trader.smart_contracts.trader_app.contract.BookContract.opt_in() -> uint64:
opt_in:
    // trader_app/contract.py:78-79
    // # Validate that only the specified user can opt in
    // assert Txn.sender == self.g_address.value, "Only authorized user can opt in"
    txn Sender
    intc_1 // 0
    bytec_3 // "address"
    app_global_get_ex
    assert // check self.g_address exists
    ==
    assert // Only authorized user can opt in
    // trader_app/contract.py:80
    // assert self.g_status.value == String("ACTIVE"), "Contract must be active"
    intc_1 // 0
    bytec_2 // "status"
    app_global_get_ex
    assert // check self.g_status exists
    bytec 9 // "ACTIVE"
    ==
    assert // Contract must be active
    // trader_app/contract.py:82-83
    // # Initialize local state
    // self.l_book_hash[Txn.sender] = Bytes(b"NAN")
    txn Sender
    bytec 5 // "book_hash"
    bytec 4 // 0x4e414e
    app_local_put
    // trader_app/contract.py:84
    // self.l_research_hash[Txn.sender] = Bytes(b"NAN")
    txn Sender
    bytec 6 // "research_hash"
    bytec 4 // 0x4e414e
    app_local_put
    // trader_app/contract.py:85
    // self.l_params[Txn.sender] = Bytes(b"NAN")
    txn Sender
    bytec_1 // "params"
    bytec 4 // 0x4e414e
    app_local_put
    // trader_app/contract.py:87
    // return UInt64(1)
    intc_0 // 1
    retsub


// projects.trader.smart_contracts.trader_app.contract.BookContract.close_out() -> uint64:
close_out:
    // trader_app/contract.py:92
    // assert Txn.sender == self.g_address.value, "Only authorized user can close out"
    txn Sender
    intc_1 // 0
    bytec_3 // "address"
    app_global_get_ex
    assert // check self.g_address exists
    ==
    assert // Only authorized user can close out
    // trader_app/contract.py:94-95
    // # Reset local state (though this is unnecessary as values will be deleted)
    // self.l_book_hash[Txn.sender] = Bytes(b"NAN")
    txn Sender
    bytec 5 // "book_hash"
    bytec 4 // 0x4e414e
    app_local_put
    // trader_app/contract.py:96
    // self.l_research_hash[Txn.sender] = Bytes(b"NAN")
    txn Sender
    bytec 6 // "research_hash"
    bytec 4 // 0x4e414e
    app_local_put
    // trader_app/contract.py:97
    // self.l_params[Txn.sender] = Bytes(b"NAN")
    txn Sender
    bytec_1 // "params"
    bytec 4 // 0x4e414e
    app_local_put
    // trader_app/contract.py:99
    // return UInt64(1)
    intc_0 // 1
    retsub


// projects.trader.smart_contracts.trader_app.contract.BookContract.update_global(new_user_id: bytes, new_book_id: bytes, new_address: bytes, new_params: bytes) -> uint64:
update_global:
    // trader_app/contract.py:101-108
    // @arc4.abimethod()
    // def update_global(
    //     self,
    //     new_user_id: Bytes,
    //     new_book_id: Bytes,
    //     new_address: Account,
    //     new_params: Bytes,
    // ) -> UInt64:
    proto 4 1
    // trader_app/contract.py:111
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // trader_app/contract.py:110-112
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Only creator can supdate parameters"
    assert // Only creator can supdate parameters
    // trader_app/contract.py:114
    // (self.g_user_id.value != new_user_id)
    intc_1 // 0
    bytec 7 // "user_id"
    app_global_get_ex
    assert // check self.g_user_id exists
    frame_dig -4
    !=
    // trader_app/contract.py:114-117
    // (self.g_user_id.value != new_user_id)
    // or (self.g_book_id.value != new_book_id)
    // or (self.g_address.value != new_address)
    // or (self.g_params.value != new_params)
    bnz update_global_bool_true@4
    // trader_app/contract.py:115
    // or (self.g_book_id.value != new_book_id)
    intc_1 // 0
    bytec 8 // "book_id"
    app_global_get_ex
    assert // check self.g_book_id exists
    frame_dig -3
    !=
    // trader_app/contract.py:114-117
    // (self.g_user_id.value != new_user_id)
    // or (self.g_book_id.value != new_book_id)
    // or (self.g_address.value != new_address)
    // or (self.g_params.value != new_params)
    bnz update_global_bool_true@4
    // trader_app/contract.py:116
    // or (self.g_address.value != new_address)
    intc_1 // 0
    bytec_3 // "address"
    app_global_get_ex
    assert // check self.g_address exists
    frame_dig -2
    !=
    // trader_app/contract.py:114-117
    // (self.g_user_id.value != new_user_id)
    // or (self.g_book_id.value != new_book_id)
    // or (self.g_address.value != new_address)
    // or (self.g_params.value != new_params)
    bnz update_global_bool_true@4
    // trader_app/contract.py:117
    // or (self.g_params.value != new_params)
    intc_1 // 0
    bytec_1 // "params"
    app_global_get_ex
    assert // check self.g_params exists
    frame_dig -1
    !=
    // trader_app/contract.py:114-117
    // (self.g_user_id.value != new_user_id)
    // or (self.g_book_id.value != new_book_id)
    // or (self.g_address.value != new_address)
    // or (self.g_params.value != new_params)
    bz update_global_bool_false@5

update_global_bool_true@4:
    intc_0 // 1

update_global_bool_merge@6:
    // trader_app/contract.py:113-118
    // assert (
    //     (self.g_user_id.value != new_user_id)
    //     or (self.g_book_id.value != new_book_id)
    //     or (self.g_address.value != new_address)
    //     or (self.g_params.value != new_params)
    // ), "New parameters must be different"
    assert // New parameters must be different
    // trader_app/contract.py:120-121
    // # Update global parameters
    // self.g_user_id.value = new_user_id
    bytec 7 // "user_id"
    frame_dig -4
    app_global_put
    // trader_app/contract.py:122
    // self.g_book_id.value = new_book_id
    bytec 8 // "book_id"
    frame_dig -3
    app_global_put
    // trader_app/contract.py:123
    // self.g_address.value = new_address
    bytec_3 // "address"
    frame_dig -2
    app_global_put
    // trader_app/contract.py:124
    // self.g_params.value = new_params
    bytec_1 // "params"
    frame_dig -1
    app_global_put
    // trader_app/contract.py:125
    // self.g_status.value = String("ACTIVE")
    bytec_2 // "status"
    bytec 9 // "ACTIVE"
    app_global_put
    // trader_app/contract.py:127
    // return UInt64(1)
    intc_0 // 1
    retsub

update_global_bool_false@5:
    intc_1 // 0
    b update_global_bool_merge@6


// projects.trader.smart_contracts.trader_app.contract.BookContract.update_status(new_status: bytes) -> uint64:
update_status:
    // trader_app/contract.py:129-130
    // @arc4.abimethod()
    // def update_status(self, new_status: String) -> UInt64:
    proto 1 1
    // trader_app/contract.py:132
    // assert Txn.sender == Global.creator_address, "Only creator can update status"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can update status
    // trader_app/contract.py:134-135
    // # Update global status
    // self.g_status.value = new_status
    bytec_2 // "status"
    frame_dig -1
    app_global_put
    // trader_app/contract.py:137
    // return UInt64(1)
    intc_0 // 1
    retsub


// projects.trader.smart_contracts.trader_app.contract.BookContract.update_local(book_hash: bytes, research_hash: bytes, params: bytes) -> uint64:
update_local:
    // trader_app/contract.py:139-142
    // @arc4.abimethod()
    // def update_local(
    //     self, book_hash: Bytes, research_hash: Bytes, params: Bytes
    // ) -> UInt64:
    proto 3 1
    // trader_app/contract.py:145
    // Txn.sender == self.g_address.value
    txn Sender
    intc_1 // 0
    bytec_3 // "address"
    app_global_get_ex
    assert // check self.g_address exists
    ==
    // trader_app/contract.py:144-146
    // assert (
    //     Txn.sender == self.g_address.value
    // ), "Only authorized user can update local state"
    assert // Only authorized user can update local state
    // trader_app/contract.py:147
    // assert self.g_status.value == String("ACTIVE"), "Contract must be active"
    intc_1 // 0
    bytec_2 // "status"
    app_global_get_ex
    assert // check self.g_status exists
    bytec 9 // "ACTIVE"
    ==
    assert // Contract must be active
    // trader_app/contract.py:151
    // self.l_book_hash[Txn.sender] != book_hash
    txn Sender
    intc_1 // 0
    bytec 5 // "book_hash"
    app_local_get_ex
    assert // check self.l_book_hash exists for account
    frame_dig -3
    !=
    // trader_app/contract.py:151-153
    // self.l_book_hash[Txn.sender] != book_hash
    // or self.l_research_hash[Txn.sender] != research_hash
    // or self.l_params[Txn.sender] != params
    bnz update_local_bool_true@3
    // trader_app/contract.py:152
    // or self.l_research_hash[Txn.sender] != research_hash
    txn Sender
    intc_1 // 0
    bytec 6 // "research_hash"
    app_local_get_ex
    assert // check self.l_research_hash exists for account
    frame_dig -2
    !=
    // trader_app/contract.py:151-153
    // self.l_book_hash[Txn.sender] != book_hash
    // or self.l_research_hash[Txn.sender] != research_hash
    // or self.l_params[Txn.sender] != params
    bnz update_local_bool_true@3
    // trader_app/contract.py:153
    // or self.l_params[Txn.sender] != params
    txn Sender
    intc_1 // 0
    bytec_1 // "params"
    app_local_get_ex
    assert // check self.l_params exists for account
    frame_dig -1
    !=
    // trader_app/contract.py:151-153
    // self.l_book_hash[Txn.sender] != book_hash
    // or self.l_research_hash[Txn.sender] != research_hash
    // or self.l_params[Txn.sender] != params
    bz update_local_bool_false@4

update_local_bool_true@3:
    intc_0 // 1

update_local_bool_merge@5:
    // trader_app/contract.py:149-154
    // # Ensure at least one value is changing
    // assert (
    //     self.l_book_hash[Txn.sender] != book_hash
    //     or self.l_research_hash[Txn.sender] != research_hash
    //     or self.l_params[Txn.sender] != params
    // ), "At least one parameter must change"
    assert // At least one parameter must change
    // trader_app/contract.py:156-157
    // # Update local state
    // self.l_book_hash[Txn.sender] = book_hash
    txn Sender
    bytec 5 // "book_hash"
    frame_dig -3
    app_local_put
    // trader_app/contract.py:158
    // self.l_research_hash[Txn.sender] = research_hash
    txn Sender
    bytec 6 // "research_hash"
    frame_dig -2
    app_local_put
    // trader_app/contract.py:159
    // self.l_params[Txn.sender] = params
    txn Sender
    bytec_1 // "params"
    frame_dig -1
    app_local_put
    // trader_app/contract.py:161
    // return UInt64(1)
    intc_0 // 1
    retsub

update_local_bool_false@4:
    intc_1 // 0
    b update_local_bool_merge@5


// projects.trader.smart_contracts.trader_app.contract.BookContract.delete_application() -> uint64:
delete_application:
    // trader_app/contract.py:167
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // trader_app/contract.py:166-168
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Only creator can delete application"
    assert // Only creator can delete application
    // trader_app/contract.py:169
    // assert self.g_status.value == String(
    intc_1 // 0
    bytec_2 // "status"
    app_global_get_ex
    assert // check self.g_status exists
    // trader_app/contract.py:169-171
    // assert self.g_status.value == String(
    //     "INACTIVE-STOP"
    // ) or self.g_status.value == String(
    pushbytes "INACTIVE-STOP"
    ==
    // trader_app/contract.py:169-173
    // assert self.g_status.value == String(
    //     "INACTIVE-STOP"
    // ) or self.g_status.value == String(
    //     "INACTIVE-SOLD"
    // ), "Contract must be inactive to delete"
    bnz delete_application_bool_true@2
    // trader_app/contract.py:171
    // ) or self.g_status.value == String(
    intc_1 // 0
    bytec_2 // "status"
    app_global_get_ex
    assert // check self.g_status exists
    // trader_app/contract.py:171-173
    // ) or self.g_status.value == String(
    //     "INACTIVE-SOLD"
    // ), "Contract must be inactive to delete"
    pushbytes "INACTIVE-SOLD"
    ==
    // trader_app/contract.py:169-173
    // assert self.g_status.value == String(
    //     "INACTIVE-STOP"
    // ) or self.g_status.value == String(
    //     "INACTIVE-SOLD"
    // ), "Contract must be inactive to delete"
    bz delete_application_bool_false@3

delete_application_bool_true@2:
    intc_0 // 1

delete_application_bool_merge@4:
    // trader_app/contract.py:169-173
    // assert self.g_status.value == String(
    //     "INACTIVE-STOP"
    // ) or self.g_status.value == String(
    //     "INACTIVE-SOLD"
    // ), "Contract must be inactive to delete"
    assert // Contract must be inactive to delete
    // trader_app/contract.py:175
    // return UInt64(1)
    intc_0 // 1
    retsub

delete_application_bool_false@3:
    intc_1 // 0
    b delete_application_bool_merge@4
