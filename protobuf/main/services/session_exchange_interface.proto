// protobuf/main/services/session_exchange_interface.proto
syntax = "proto3";

package session_exchange;

service SessionExchangeSimulator {
  // Single unified stream for all exchange data
  rpc StreamExchangeData(StreamRequest) returns (stream ExchangeDataUpdate);
  
  // Heartbeat to verify connection
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

message StreamRequest {
  string client_id = 1;
}

message ExchangeDataUpdate {
  int64 timestamp = 1;
  repeated MarketData market_data = 2;
  repeated OrderData orders_data = 3;
  PortfolioStatus portfolio = 4;
}

message MarketData {
  string symbol = 1;
  double open = 2;
  double high = 3;
  double low = 4;
  double close = 5;
  int32 volume = 6;
  int32 trade_count = 7;
  double vwap = 8;
}

message OrderData {
  string order_id = 1;
  string symbol = 2;
  string status = 3;
  int32 filled_quantity = 4;
  double average_price = 5;
}

message PortfolioStatus {
  repeated Position positions = 1;
  double cash_balance = 2;
  double total_value = 3;
}

message Position {
  string symbol = 1;
  int32 quantity = 2;
  double average_cost = 3;
  double market_value = 4;
}

message HeartbeatRequest {
  int64 client_timestamp = 3;
}

message HeartbeatResponse {
  bool success = 1;
  int64 server_timestamp = 2;
  SimulatorStatus status = 3;
}

enum SimulatorStatus {
  INITIALIZING = 0;  // Loading data, catching up
  RUNNING = 1;       // Caught up to real time, streaming data
  ERROR = 2;         // Something crashed, no data expected
  STOPPING = 3;      // Shutting down gracefully
}