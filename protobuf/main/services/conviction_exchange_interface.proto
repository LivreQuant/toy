syntax = "proto3";

package conviction_exchange;

service ConvictionExchangeSimulator {
  // Submit convictions in batch
  rpc SubmitConvictions(BatchConvictionRequest) returns (BatchConvictionResponse);

  // Cancel convictions in batch
  rpc CancelConvictions(BatchCancelRequest) returns (BatchCancelResponse);
}

enum Side {
  BUY = 0;
  SELL = 1;
}

enum ParticipationRate {
  LOW = 0;
  MEDIUM = 1;
  HIGH = 2;
}

message ConvictionRequest {
  string instrument_id = 1;
  string conviction_id = 2;
  ParticipationRate participation_rate = 3;
  string tag = 4;

  Side side = 5;
  double score = 6;
  double quantity = 7;
  double zscore = 8;
  double target_percentage = 9;
  double target_notional = 10;

  string horizon_zscore = 11;

  // operational parameters (optional)
  optional double min_position_size_pct = 12;
  optional double max_position_size_pct = 13;
  optional double max_days_to_liquidate = 14;
}

message BatchConvictionRequest {
  string book_id = 1;  // Book submitting the convictions
  repeated ConvictionRequest convictions = 2;
}

message ConvictionResponse {
  bool success = 1;
  string broker_id = 2;
  string error_message = 3;
}

message BatchConvictionResponse {
  bool success = 1;
  repeated ConvictionResponse results = 2;
  string error_message = 3;
}

message BatchCancelRequest {
  string book_id = 1;  // Book canceling the convictions
  repeated string conviction_id = 2;
}

message CancelResult {
  string broker_id = 1;
  bool success = 2;
  string error_message = 3;
}

message BatchCancelResponse {
  bool success = 1;
  repeated CancelResult results = 2;
  string error_message = 3;
}