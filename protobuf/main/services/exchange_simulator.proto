syntax = "proto3";

package exchange;

service ExchangeSimulator {
  // Single unified stream for all exchange data
  rpc StreamExchangeData(StreamRequest) returns (stream ExchangeDataUpdate);
  
  // Heartbeat to verify connection
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // Submit an order
  rpc SubmitOrder(SubmitOrderRequest) returns (SubmitOrderResponse);
  
  // Cancel an order
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);
  
}

message StreamRequest {
  string session_id = 1;
  string client_id = 2;
  repeated string symbols = 3;
}

message ExchangeDataUpdate {
  int64 timestamp = 1;
  repeated MarketData market_data = 2;
  repeated OrderData orders_data = 3;
  PortfolioStatus portfolio = 4;
}

message MarketData {
  string symbol = 1;
  double bid = 2;
  double ask = 3;
  int32 bid_size = 4;
  int32 ask_size = 5;
  double last_price = 6;
  int32 last_size = 7;
}

message OrderData {
  string order_id = 1;
  string symbol = 2;
  string status = 3;
  int32 filled_quantity = 4;
  double average_price = 5;
}

message PortfolioStatus {
  repeated Position positions = 1;
  double cash_balance = 2;
  double total_value = 3;
}

message Position {
  string symbol = 1;
  int32 quantity = 2;
  double average_cost = 3;
  double market_value = 4;
}

message HeartbeatRequest {
  int64 client_timestamp = 3;
}

message HeartbeatResponse {
  bool success = 1;
  int64 server_timestamp = 2;
}

message SubmitOrderRequest {
  string session_id = 1;
  string symbol = 2;
  enum Side {
    BUY = 0;
    SELL = 1;
  }
  Side side = 3;
  double quantity = 4;
  double price = 5;
  enum Type {
    MARKET = 0;
    LIMIT = 1;
  }
  Type type = 6;
  string request_id = 7; 
}

message SubmitOrderResponse {
  bool success = 1;
  string order_id = 2;
  string error_message = 3;
}

message CancelOrderRequest {
  string session_id = 1;
  string order_id = 2;
}

message CancelOrderResponse {
  bool success = 1;
  string error_message = 2;
}