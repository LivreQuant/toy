// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file main/services/session_exchange_interface.proto (package session_exchange, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file main/services/session_exchange_interface.proto.
 */
export const file_main_services_session_exchange_interface: GenFile = /*@__PURE__*/
  fileDesc("");

/**
 * Enhanced stream request with connection metadata
 *
 * @generated from message session_exchange.StreamRequest
 */
export type StreamRequest = Message<"session_exchange.StreamRequest"> & {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * User to stream data for
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * When this connection was established
   *
   * @generated from field: int64 connection_timestamp = 3;
   */
  connectionTimestamp: bigint;

  /**
   * Unique identifier for this session instance
   *
   * @generated from field: string session_instance_id = 4;
   */
  sessionInstanceId: string;

  /**
   * Whether to send initial state snapshot
   *
   * @generated from field: bool request_initial_state = 5;
   */
  requestInitialState: boolean;
};

/**
 * Describes the message session_exchange.StreamRequest.
 * Use `create(StreamRequestSchema)` to create a new message.
 */
export const StreamRequestSchema: GenMessage<StreamRequest> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 0);

/**
 * Enhanced exchange data update with broadcasting metadata
 *
 * @generated from message session_exchange.ExchangeDataUpdate
 */
export type ExchangeDataUpdate = Message<"session_exchange.ExchangeDataUpdate"> & {
  /**
   * @generated from field: int64 timestamp = 1;
   */
  timestamp: bigint;

  /**
   * Which user this update belongs to
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * Sequential number for this user's updates
   *
   * @generated from field: int64 sequence_number = 3;
   */
  sequenceNumber: bigint;

  /**
   * Unique ID for this broadcast batch
   *
   * @generated from field: string broadcast_id = 4;
   */
  broadcastId: string;

  /**
   * Whether this is initial state data
   *
   * @generated from field: bool is_initial_state = 5;
   */
  isInitialState: boolean;

  /**
   * Whether this is historical replay data
   *
   * @generated from field: bool is_replay_data = 6;
   */
  isReplayData: boolean;

  /**
   * Session metadata
   *
   * @generated from field: session_exchange.SessionMetadata session_metadata = 7;
   */
  sessionMetadata?: SessionMetadata;

  /**
   * Data payload (existing fields)
   *
   * @generated from field: repeated session_exchange.EquityData equity_data = 8;
   */
  equityData: EquityData[];

  /**
   * @generated from field: repeated session_exchange.OrderData orders_data = 9;
   */
  ordersData: OrderData[];

  /**
   * @generated from field: session_exchange.PortfolioStatus portfolio = 10;
   */
  portfolio?: PortfolioStatus;

  /**
   * @generated from field: session_exchange.AccountStatus accounts = 11;
   */
  accounts?: AccountStatus;

  /**
   * @generated from field: session_exchange.FXStatus fx_rates = 12;
   */
  fxRates?: FXStatus;

  /**
   * @generated from field: session_exchange.ImpactStatus impact = 13;
   */
  impact?: ImpactStatus;

  /**
   * @generated from field: session_exchange.ReturnsStatus returns = 14;
   */
  returns?: ReturnsStatus;

  /**
   * @generated from field: session_exchange.RiskStatus risk = 15;
   */
  risk?: RiskStatus;

  /**
   * @generated from field: session_exchange.UniverseStatus universe = 16;
   */
  universe?: UniverseStatus;

  /**
   * @generated from field: repeated session_exchange.Trade trades = 17;
   */
  trades: Trade[];
};

/**
 * Describes the message session_exchange.ExchangeDataUpdate.
 * Use `create(ExchangeDataUpdateSchema)` to create a new message.
 */
export const ExchangeDataUpdateSchema: GenMessage<ExchangeDataUpdate> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 1);

/**
 * New: Session metadata for tracking broadcast information
 *
 * @generated from message session_exchange.SessionMetadata
 */
export type SessionMetadata = Message<"session_exchange.SessionMetadata"> & {
  /**
   * Number of active connections for this user
   *
   * @generated from field: int32 active_connections = 1;
   */
  activeConnections: number;

  /**
   * Last broadcast timestamp
   *
   * @generated from field: int64 last_broadcast_timestamp = 2;
   */
  lastBroadcastTimestamp: bigint;

  /**
   * Which exchange instance sent this
   *
   * @generated from field: string source_instance_id = 3;
   */
  sourceInstanceId: string;

  /**
   * Processing state information
   *
   * @generated from field: session_exchange.ProcessingStatus processing_status = 4;
   */
  processingStatus?: ProcessingStatus;
};

/**
 * Describes the message session_exchange.SessionMetadata.
 * Use `create(SessionMetadataSchema)` to create a new message.
 */
export const SessionMetadataSchema: GenMessage<SessionMetadata> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 2);

/**
 * New: Processing status information
 *
 * @generated from message session_exchange.ProcessingStatus
 */
export type ProcessingStatus = Message<"session_exchange.ProcessingStatus"> & {
  /**
   * Current time bin being processed
   *
   * @generated from field: string current_bin = 1;
   */
  currentBin: string;

  /**
   * Next expected time bin
   *
   * @generated from field: string next_bin = 2;
   */
  nextBin: string;

  /**
   * Number of updates sent in this session
   *
   * @generated from field: int32 updates_sent = 3;
   */
  updatesSent: number;

  /**
   * Number of live updates sent
   *
   * @generated from field: int32 live_updates = 4;
   */
  liveUpdates: number;

  /**
   * Number of replay updates sent
   *
   * @generated from field: int32 replay_updates = 5;
   */
  replayUpdates: number;

  /**
   * Processing latency
   *
   * @generated from field: double processing_latency_ms = 6;
   */
  processingLatencyMs: number;
};

/**
 * Describes the message session_exchange.ProcessingStatus.
 * Use `create(ProcessingStatusSchema)` to create a new message.
 */
export const ProcessingStatusSchema: GenMessage<ProcessingStatus> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 3);

/**
 * Enhanced heartbeat with session information
 *
 * @generated from message session_exchange.HeartbeatRequest
 */
export type HeartbeatRequest = Message<"session_exchange.HeartbeatRequest"> & {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * Session instance requesting heartbeat
   *
   * @generated from field: string session_instance_id = 3;
   */
  sessionInstanceId: string;

  /**
   * Last sequence number received
   *
   * @generated from field: int64 last_received_sequence = 4;
   */
  lastReceivedSequence: bigint;
};

/**
 * Describes the message session_exchange.HeartbeatRequest.
 * Use `create(HeartbeatRequestSchema)` to create a new message.
 */
export const HeartbeatRequestSchema: GenMessage<HeartbeatRequest> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 4);

/**
 * @generated from message session_exchange.HeartbeatResponse
 */
export type HeartbeatResponse = Message<"session_exchange.HeartbeatResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: int64 timestamp = 2;
   */
  timestamp: bigint;

  /**
   * @generated from field: string current_bin = 3;
   */
  currentBin: string;

  /**
   * @generated from field: string next_bin = 4;
   */
  nextBin: string;

  /**
   * @generated from field: string market_state = 5;
   */
  marketState: string;

  /**
   * Connection status for this user
   *
   * @generated from field: session_exchange.SessionConnectionInfo connection_info = 6;
   */
  connectionInfo?: SessionConnectionInfo;
};

/**
 * Describes the message session_exchange.HeartbeatResponse.
 * Use `create(HeartbeatResponseSchema)` to create a new message.
 */
export const HeartbeatResponseSchema: GenMessage<HeartbeatResponse> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 5);

/**
 * New: Session connection information
 *
 * @generated from message session_exchange.SessionConnectionInfo
 */
export type SessionConnectionInfo = Message<"session_exchange.SessionConnectionInfo"> & {
  /**
   * Number of active connections for this user
   *
   * @generated from field: int32 active_connections = 1;
   */
  activeConnections: number;

  /**
   * Next sequence number to be sent
   *
   * @generated from field: int64 next_expected_sequence = 2;
   */
  nextExpectedSequence: bigint;

  /**
   * Last data sent timestamp
   *
   * @generated from field: int64 last_sent_timestamp = 3;
   */
  lastSentTimestamp: bigint;

  /**
   * Whether this is the primary connection
   *
   * @generated from field: bool is_primary_connection = 4;
   */
  isPrimaryConnection: boolean;

  /**
   * List of connected session instance IDs
   *
   * @generated from field: repeated string connected_instances = 5;
   */
  connectedInstances: string[];
};

/**
 * Describes the message session_exchange.SessionConnectionInfo.
 * Use `create(SessionConnectionInfoSchema)` to create a new message.
 */
export const SessionConnectionInfoSchema: GenMessage<SessionConnectionInfo> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 6);

/**
 * Enhanced health request
 *
 * @generated from message session_exchange.HealthRequest
 */
export type HealthRequest = Message<"session_exchange.HealthRequest"> & {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * @generated from field: string session_instance_id = 3;
   */
  sessionInstanceId: string;

  /**
   * Whether to include session statistics
   *
   * @generated from field: bool include_session_stats = 4;
   */
  includeSessionStats: boolean;
};

/**
 * Describes the message session_exchange.HealthRequest.
 * Use `create(HealthRequestSchema)` to create a new message.
 */
export const HealthRequestSchema: GenMessage<HealthRequest> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 7);

/**
 * Enhanced health response with session information
 *
 * @generated from message session_exchange.HealthResponse
 */
export type HealthResponse = Message<"session_exchange.HealthResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: int64 timestamp = 2;
   */
  timestamp: bigint;

  /**
   * @generated from field: string market_state = 3;
   */
  marketState: string;

  /**
   * @generated from field: map<string, session_exchange.ServiceMetrics> services = 4;
   */
  services: { [key: string]: ServiceMetrics };

  /**
   * Session service statistics
   *
   * @generated from field: session_exchange.SessionServiceStats session_stats = 5;
   */
  sessionStats?: SessionServiceStats;
};

/**
 * Describes the message session_exchange.HealthResponse.
 * Use `create(HealthResponseSchema)` to create a new message.
 */
export const HealthResponseSchema: GenMessage<HealthResponse> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 8);

/**
 * New: Session service statistics
 *
 * @generated from message session_exchange.SessionServiceStats
 */
export type SessionServiceStats = Message<"session_exchange.SessionServiceStats"> & {
  /**
   * Total number of users with active sessions
   *
   * @generated from field: int32 total_active_users = 1;
   */
  totalActiveUsers: number;

  /**
   * Total number of active connections
   *
   * @generated from field: int32 total_active_connections = 2;
   */
  totalActiveConnections: number;

  /**
   * Per-user session statistics
   *
   * @generated from field: map<string, session_exchange.UserSessionStats> user_stats = 3;
   */
  userStats: { [key: string]: UserSessionStats };

  /**
   * Total updates sent across all users
   *
   * @generated from field: int64 total_updates_sent = 4;
   */
  totalUpdatesSent: bigint;

  /**
   * Average processing latency
   *
   * @generated from field: double average_latency_ms = 5;
   */
  averageLatencyMs: number;
};

/**
 * Describes the message session_exchange.SessionServiceStats.
 * Use `create(SessionServiceStatsSchema)` to create a new message.
 */
export const SessionServiceStatsSchema: GenMessage<SessionServiceStats> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 9);

/**
 * New: Per-user session statistics
 *
 * @generated from message session_exchange.UserSessionStats
 */
export type UserSessionStats = Message<"session_exchange.UserSessionStats"> & {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * Number of active connections for this user
   *
   * @generated from field: int32 active_connections = 2;
   */
  activeConnections: number;

  /**
   * Total updates sent to this user
   *
   * @generated from field: int64 updates_sent = 3;
   */
  updatesSent: bigint;

  /**
   * Last activity timestamp
   *
   * @generated from field: int64 last_activity_timestamp = 4;
   */
  lastActivityTimestamp: bigint;

  /**
   * Connected session instance IDs
   *
   * @generated from field: repeated string session_instances = 5;
   */
  sessionInstances: string[];

  /**
   * Last sequence number sent
   *
   * @generated from field: int64 last_sequence_sent = 6;
   */
  lastSequenceSent: bigint;
};

/**
 * Describes the message session_exchange.UserSessionStats.
 * Use `create(UserSessionStatsSchema)` to create a new message.
 */
export const UserSessionStatsSchema: GenMessage<UserSessionStats> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 10);

/**
 * New: Session status request/response
 *
 * @generated from message session_exchange.SessionStatusRequest
 */
export type SessionStatusRequest = Message<"session_exchange.SessionStatusRequest"> & {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: string session_instance_id = 2;
   */
  sessionInstanceId: string;
};

/**
 * Describes the message session_exchange.SessionStatusRequest.
 * Use `create(SessionStatusRequestSchema)` to create a new message.
 */
export const SessionStatusRequestSchema: GenMessage<SessionStatusRequest> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 11);

/**
 * @generated from message session_exchange.SessionStatusResponse
 */
export type SessionStatusResponse = Message<"session_exchange.SessionStatusResponse"> & {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: bool is_connected = 2;
   */
  isConnected: boolean;

  /**
   * Number of connections for this user
   *
   * @generated from field: int32 connection_count = 3;
   */
  connectionCount: number;

  /**
   * @generated from field: int64 last_update_timestamp = 4;
   */
  lastUpdateTimestamp: bigint;

  /**
   * @generated from field: int64 next_sequence_number = 5;
   */
  nextSequenceNumber: bigint;

  /**
   * @generated from field: repeated string active_session_instances = 6;
   */
  activeSessionInstances: string[];
};

/**
 * Describes the message session_exchange.SessionStatusResponse.
 * Use `create(SessionStatusResponseSchema)` to create a new message.
 */
export const SessionStatusResponseSchema: GenMessage<SessionStatusResponse> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 12);

/**
 * Existing data structures (kept for compatibility)
 *
 * @generated from message session_exchange.EquityData
 */
export type EquityData = Message<"session_exchange.EquityData"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: double open = 2;
   */
  open: number;

  /**
   * @generated from field: double high = 3;
   */
  high: number;

  /**
   * @generated from field: double low = 4;
   */
  low: number;

  /**
   * @generated from field: double close = 5;
   */
  close: number;

  /**
   * @generated from field: int32 volume = 6;
   */
  volume: number;

  /**
   * @generated from field: int32 trade_count = 7;
   */
  tradeCount: number;

  /**
   * @generated from field: double vwap = 8;
   */
  vwap: number;

  /**
   * @generated from field: string exchange = 9;
   */
  exchange: string;

  /**
   * @generated from field: string currency = 10;
   */
  currency: string;

  /**
   * @generated from field: double vwas = 11;
   */
  vwas: number;

  /**
   * @generated from field: double vwav = 12;
   */
  vwav: number;
};

/**
 * Describes the message session_exchange.EquityData.
 * Use `create(EquityDataSchema)` to create a new message.
 */
export const EquityDataSchema: GenMessage<EquityData> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 13);

/**
 * @generated from message session_exchange.Trade
 */
export type Trade = Message<"session_exchange.Trade"> & {
  /**
   * @generated from field: string trade_id = 1;
   */
  tradeId: string;

  /**
   * @generated from field: string order_id = 2;
   */
  orderId: string;

  /**
   * @generated from field: string cl_order_id = 3;
   */
  clOrderId: string;

  /**
   * @generated from field: string symbol = 4;
   */
  symbol: string;

  /**
   * @generated from field: string side = 5;
   */
  side: string;

  /**
   * @generated from field: string currency = 6;
   */
  currency: string;

  /**
   * @generated from field: double price = 7;
   */
  price: number;

  /**
   * @generated from field: double quantity = 8;
   */
  quantity: number;

  /**
   * @generated from field: double remaining_qty = 9;
   */
  remainingQty: number;

  /**
   * @generated from field: double completed_qty = 10;
   */
  completedQty: number;

  /**
   * @generated from field: string detail = 11;
   */
  detail: string;

  /**
   * @generated from field: int64 start_timestamp = 12;
   */
  startTimestamp: bigint;

  /**
   * @generated from field: int64 end_timestamp = 13;
   */
  endTimestamp: bigint;
};

/**
 * Describes the message session_exchange.Trade.
 * Use `create(TradeSchema)` to create a new message.
 */
export const TradeSchema: GenMessage<Trade> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 14);

/**
 * @generated from message session_exchange.OrderData
 */
export type OrderData = Message<"session_exchange.OrderData"> & {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId: string;

  /**
   * @generated from field: string cl_order_id = 2;
   */
  clOrderId: string;

  /**
   * @generated from field: string symbol = 3;
   */
  symbol: string;

  /**
   * @generated from field: string side = 4;
   */
  side: string;

  /**
   * @generated from field: double original_qty = 5;
   */
  originalQty: number;

  /**
   * @generated from field: double remaining_qty = 6;
   */
  remainingQty: number;

  /**
   * @generated from field: double completed_qty = 7;
   */
  completedQty: number;

  /**
   * @generated from field: string currency = 8;
   */
  currency: string;

  /**
   * @generated from field: double price = 9;
   */
  price: number;

  /**
   * @generated from field: string order_type = 10;
   */
  orderType: string;

  /**
   * @generated from field: double participation_rate = 11;
   */
  participationRate: number;

  /**
   * @generated from field: session_exchange.OrderStateEnum order_state = 12;
   */
  orderState: OrderStateEnum;

  /**
   * @generated from field: int64 submit_timestamp = 13;
   */
  submitTimestamp: bigint;

  /**
   * @generated from field: int64 start_timestamp = 14;
   */
  startTimestamp: bigint;

  /**
   * @generated from field: repeated session_exchange.Trade trades = 15;
   */
  trades: Trade[];
};

/**
 * Describes the message session_exchange.OrderData.
 * Use `create(OrderDataSchema)` to create a new message.
 */
export const OrderDataSchema: GenMessage<OrderData> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 15);

/**
 * @generated from message session_exchange.Position
 */
export type Position = Message<"session_exchange.Position"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: double quantity = 2;
   */
  quantity: number;

  /**
   * @generated from field: double target_quantity = 3;
   */
  targetQuantity: number;

  /**
   * @generated from field: string currency = 4;
   */
  currency: string;

  /**
   * @generated from field: double average_cost = 5;
   */
  averageCost: number;

  /**
   * @generated from field: double market_value = 6;
   */
  marketValue: number;

  /**
   * @generated from field: double sod_realized_pnl = 7;
   */
  sodRealizedPnl: number;

  /**
   * @generated from field: double itd_realized_pnl = 8;
   */
  itdRealizedPnl: number;

  /**
   * @generated from field: double realized_pnl = 9;
   */
  realizedPnl: number;

  /**
   * @generated from field: double unrealized_pnl = 10;
   */
  unrealizedPnl: number;
};

/**
 * Describes the message session_exchange.Position.
 * Use `create(PositionSchema)` to create a new message.
 */
export const PositionSchema: GenMessage<Position> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 16);

/**
 * @generated from message session_exchange.PortfolioStatus
 */
export type PortfolioStatus = Message<"session_exchange.PortfolioStatus"> & {
  /**
   * @generated from field: repeated session_exchange.Position positions = 1;
   */
  positions: Position[];

  /**
   * @generated from field: double cash_balance = 2;
   */
  cashBalance: number;

  /**
   * @generated from field: double total_value = 3;
   */
  totalValue: number;

  /**
   * @generated from field: double total_pnl = 4;
   */
  totalPnl: number;

  /**
   * @generated from field: double unrealized_pnl = 5;
   */
  unrealizedPnl: number;

  /**
   * @generated from field: double realized_pnl = 6;
   */
  realizedPnl: number;
};

/**
 * Describes the message session_exchange.PortfolioStatus.
 * Use `create(PortfolioStatusSchema)` to create a new message.
 */
export const PortfolioStatusSchema: GenMessage<PortfolioStatus> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 17);

/**
 * @generated from message session_exchange.AccountBalance
 */
export type AccountBalance = Message<"session_exchange.AccountBalance"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: string currency = 2;
   */
  currency: string;

  /**
   * @generated from field: double amount = 3;
   */
  amount: number;
};

/**
 * Describes the message session_exchange.AccountBalance.
 * Use `create(AccountBalanceSchema)` to create a new message.
 */
export const AccountBalanceSchema: GenMessage<AccountBalance> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 18);

/**
 * @generated from message session_exchange.AccountStatus
 */
export type AccountStatus = Message<"session_exchange.AccountStatus"> & {
  /**
   * @generated from field: repeated session_exchange.AccountBalance balances = 1;
   */
  balances: AccountBalance[];

  /**
   * @generated from field: double nav = 2;
   */
  nav: number;

  /**
   * @generated from field: string base_currency = 3;
   */
  baseCurrency: string;
};

/**
 * Describes the message session_exchange.AccountStatus.
 * Use `create(AccountStatusSchema)` to create a new message.
 */
export const AccountStatusSchema: GenMessage<AccountStatus> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 19);

/**
 * @generated from message session_exchange.FXRate
 */
export type FXRate = Message<"session_exchange.FXRate"> & {
  /**
   * @generated from field: string from_currency = 1;
   */
  fromCurrency: string;

  /**
   * @generated from field: string to_currency = 2;
   */
  toCurrency: string;

  /**
   * @generated from field: double rate = 3;
   */
  rate: number;
};

/**
 * Describes the message session_exchange.FXRate.
 * Use `create(FXRateSchema)` to create a new message.
 */
export const FXRateSchema: GenMessage<FXRate> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 20);

/**
 * @generated from message session_exchange.FXStatus
 */
export type FXStatus = Message<"session_exchange.FXStatus"> & {
  /**
   * @generated from field: repeated session_exchange.FXRate rates = 1;
   */
  rates: FXRate[];
};

/**
 * Describes the message session_exchange.FXStatus.
 * Use `create(FXStatusSchema)` to create a new message.
 */
export const FXStatusSchema: GenMessage<FXStatus> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 21);

/**
 * @generated from message session_exchange.ImpactData
 */
export type ImpactData = Message<"session_exchange.ImpactData"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: double current_impact = 2;
   */
  currentImpact: number;

  /**
   * @generated from field: string currency = 3;
   */
  currency: string;

  /**
   * @generated from field: double base_price = 4;
   */
  basePrice: number;

  /**
   * @generated from field: double impacted_price = 5;
   */
  impactedPrice: number;

  /**
   * @generated from field: int64 cumulative_volume = 6;
   */
  cumulativeVolume: bigint;

  /**
   * @generated from field: int64 trade_volume = 7;
   */
  tradeVolume: bigint;
};

/**
 * Describes the message session_exchange.ImpactData.
 * Use `create(ImpactDataSchema)` to create a new message.
 */
export const ImpactDataSchema: GenMessage<ImpactData> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 22);

/**
 * @generated from message session_exchange.ImpactStatus
 */
export type ImpactStatus = Message<"session_exchange.ImpactStatus"> & {
  /**
   * @generated from field: repeated session_exchange.ImpactData impacts = 1;
   */
  impacts: ImpactData[];
};

/**
 * Describes the message session_exchange.ImpactStatus.
 * Use `create(ImpactStatusSchema)` to create a new message.
 */
export const ImpactStatusSchema: GenMessage<ImpactStatus> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 23);

/**
 * @generated from message session_exchange.ReturnData
 */
export type ReturnData = Message<"session_exchange.ReturnData"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: double return_value = 2;
   */
  returnValue: number;

  /**
   * @generated from field: string currency = 3;
   */
  currency: string;

  /**
   * @generated from field: string category = 4;
   */
  category: string;

  /**
   * @generated from field: string subcategory = 5;
   */
  subcategory: string;

  /**
   * @generated from field: double emv = 6;
   */
  emv: number;

  /**
   * @generated from field: double bmv = 7;
   */
  bmv: number;

  /**
   * @generated from field: double bmv_book = 8;
   */
  bmvBook: number;

  /**
   * @generated from field: double cf = 9;
   */
  cf: number;

  /**
   * @generated from field: double periodic_return_subcategory = 10;
   */
  periodicReturnSubcategory: number;

  /**
   * @generated from field: double cumulative_return_subcategory = 11;
   */
  cumulativeReturnSubcategory: number;

  /**
   * @generated from field: double contribution_percentage = 12;
   */
  contributionPercentage: number;

  /**
   * @generated from field: double periodic_return_contribution = 13;
   */
  periodicReturnContribution: number;

  /**
   * @generated from field: double cumulative_return_contribution = 14;
   */
  cumulativeReturnContribution: number;
};

/**
 * Describes the message session_exchange.ReturnData.
 * Use `create(ReturnDataSchema)` to create a new message.
 */
export const ReturnDataSchema: GenMessage<ReturnData> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 24);

/**
 * @generated from message session_exchange.ReturnsStatus
 */
export type ReturnsStatus = Message<"session_exchange.ReturnsStatus"> & {
  /**
   * @generated from field: repeated session_exchange.ReturnData returns = 1;
   */
  returns: ReturnData[];
};

/**
 * Describes the message session_exchange.ReturnsStatus.
 * Use `create(ReturnsStatusSchema)` to create a new message.
 */
export const ReturnsStatusSchema: GenMessage<ReturnsStatus> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 25);

/**
 * @generated from message session_exchange.EquityRiskData
 */
export type EquityRiskData = Message<"session_exchange.EquityRiskData"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: double var = 2;
   */
  var: number;

  /**
   * @generated from field: double expected_shortfall = 3;
   */
  expectedShortfall: number;

  /**
   * @generated from field: string currency = 4;
   */
  currency: string;
};

/**
 * Describes the message session_exchange.EquityRiskData.
 * Use `create(EquityRiskDataSchema)` to create a new message.
 */
export const EquityRiskDataSchema: GenMessage<EquityRiskData> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 26);

/**
 * @generated from message session_exchange.PortfolioRiskData
 */
export type PortfolioRiskData = Message<"session_exchange.PortfolioRiskData"> & {
  /**
   * @generated from field: double portfolio_var = 1;
   */
  portfolioVar: number;

  /**
   * @generated from field: double portfolio_expected_shortfall = 2;
   */
  portfolioExpectedShortfall: number;

  /**
   * @generated from field: string currency = 3;
   */
  currency: string;
};

/**
 * Describes the message session_exchange.PortfolioRiskData.
 * Use `create(PortfolioRiskDataSchema)` to create a new message.
 */
export const PortfolioRiskDataSchema: GenMessage<PortfolioRiskData> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 27);

/**
 * @generated from message session_exchange.RiskExposures
 */
export type RiskExposures = Message<"session_exchange.RiskExposures"> & {
  /**
   * @generated from field: map<string, double> sector_exposures = 1;
   */
  sectorExposures: { [key: string]: number };

  /**
   * @generated from field: map<string, double> country_exposures = 2;
   */
  countryExposures: { [key: string]: number };

  /**
   * @generated from field: map<string, double> currency_exposures = 3;
   */
  currencyExposures: { [key: string]: number };
};

/**
 * Describes the message session_exchange.RiskExposures.
 * Use `create(RiskExposuresSchema)` to create a new message.
 */
export const RiskExposuresSchema: GenMessage<RiskExposures> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 28);

/**
 * @generated from message session_exchange.RiskMetrics
 */
export type RiskMetrics = Message<"session_exchange.RiskMetrics"> & {
  /**
   * @generated from field: double beta = 1;
   */
  beta: number;

  /**
   * @generated from field: double alpha = 2;
   */
  alpha: number;

  /**
   * @generated from field: double sharpe_ratio = 3;
   */
  sharpeRatio: number;

  /**
   * @generated from field: double sortino_ratio = 4;
   */
  sortinoRatio: number;
};

/**
 * Describes the message session_exchange.RiskMetrics.
 * Use `create(RiskMetricsSchema)` to create a new message.
 */
export const RiskMetricsSchema: GenMessage<RiskMetrics> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 29);

/**
 * @generated from message session_exchange.RiskStatus
 */
export type RiskStatus = Message<"session_exchange.RiskStatus"> & {
  /**
   * @generated from field: repeated string symbols = 1;
   */
  symbols: string[];

  /**
   * @generated from field: repeated session_exchange.EquityRiskData equity_risk = 2;
   */
  equityRisk: EquityRiskData[];

  /**
   * @generated from field: session_exchange.PortfolioRiskData portfolio_risk = 3;
   */
  portfolioRisk?: PortfolioRiskData;

  /**
   * @generated from field: session_exchange.RiskExposures exposures = 4;
   */
  exposures?: RiskExposures;

  /**
   * @generated from field: session_exchange.RiskMetrics metrics = 5;
   */
  metrics?: RiskMetrics;
};

/**
 * Describes the message session_exchange.RiskStatus.
 * Use `create(RiskStatusSchema)` to create a new message.
 */
export const RiskStatusSchema: GenMessage<RiskStatus> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 30);

/**
 * @generated from message session_exchange.UniverseData
 */
export type UniverseData = Message<"session_exchange.UniverseData"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: string company_name = 2;
   */
  companyName: string;

  /**
   * @generated from field: string sector = 3;
   */
  sector: string;

  /**
   * @generated from field: string industry = 4;
   */
  industry: string;

  /**
   * @generated from field: double market_cap = 5;
   */
  marketCap: number;

  /**
   * @generated from field: string country = 6;
   */
  country: string;

  /**
   * @generated from field: string currency = 7;
   */
  currency: string;

  /**
   * @generated from field: int64 avg_daily_volume = 8;
   */
  avgDailyVolume: bigint;

  /**
   * @generated from field: double beta = 9;
   */
  beta: number;

  /**
   * @generated from field: map<string, double> exposures = 10;
   */
  exposures: { [key: string]: number };

  /**
   * @generated from field: map<string, string> custom_attributes = 11;
   */
  customAttributes: { [key: string]: string };
};

/**
 * Describes the message session_exchange.UniverseData.
 * Use `create(UniverseDataSchema)` to create a new message.
 */
export const UniverseDataSchema: GenMessage<UniverseData> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 31);

/**
 * @generated from message session_exchange.UniverseStatus
 */
export type UniverseStatus = Message<"session_exchange.UniverseStatus"> & {
  /**
   * @generated from field: repeated session_exchange.UniverseData symbols = 1;
   */
  symbols: UniverseData[];
};

/**
 * Describes the message session_exchange.UniverseStatus.
 * Use `create(UniverseStatusSchema)` to create a new message.
 */
export const UniverseStatusSchema: GenMessage<UniverseStatus> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 32);

/**
 * @generated from message session_exchange.ServiceMetrics
 */
export type ServiceMetrics = Message<"session_exchange.ServiceMetrics"> & {
  /**
   * @generated from field: bool running = 1;
   */
  running: boolean;

  /**
   * @generated from field: int32 errors = 2;
   */
  errors: number;

  /**
   * @generated from field: int64 uptime_seconds = 3;
   */
  uptimeSeconds: bigint;

  /**
   * @generated from field: string last_error = 4;
   */
  lastError: string;

  /**
   * @generated from field: int64 requests_processed = 5;
   */
  requestsProcessed: bigint;
};

/**
 * Describes the message session_exchange.ServiceMetrics.
 * Use `create(ServiceMetricsSchema)` to create a new message.
 */
export const ServiceMetricsSchema: GenMessage<ServiceMetrics> = /*@__PURE__*/
  messageDesc(file_main_services_session_exchange_interface, 33);

/**
 * @generated from enum session_exchange.OrderStateEnum
 */
export enum OrderStateEnum {
  /**
   * @generated from enum value: WORKING = 0;
   */
  WORKING = 0,

  /**
   * @generated from enum value: COMPLETED = 1;
   */
  COMPLETED = 1,

  /**
   * @generated from enum value: CANCELLED = 2;
   */
  CANCELLED = 2,
}

/**
 * Describes the enum session_exchange.OrderStateEnum.
 */
export const OrderStateEnumSchema: GenEnum<OrderStateEnum> = /*@__PURE__*/
  enumDesc(file_main_services_session_exchange_interface, 0);

/**
 * @generated from enum session_exchange.SimulatorStatus
 */
export enum SimulatorStatus {
  /**
   * @generated from enum value: INITIALIZING = 0;
   */
  INITIALIZING = 0,

  /**
   * @generated from enum value: RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * @generated from enum value: PAUSED = 2;
   */
  PAUSED = 2,

  /**
   * @generated from enum value: STOPPED = 3;
   */
  STOPPED = 3,

  /**
   * @generated from enum value: ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Describes the enum session_exchange.SimulatorStatus.
 */
export const SimulatorStatusSchema: GenEnum<SimulatorStatus> = /*@__PURE__*/
  enumDesc(file_main_services_session_exchange_interface, 1);

/**
 * @generated from service session_exchange.SessionExchangeSimulator
 */
export const SessionExchangeSimulator: GenService<{
  /**
   * Single unified stream for all exchange data - user-aware with broadcasting
   *
   * @generated from rpc session_exchange.SessionExchangeSimulator.StreamExchangeData
   */
  streamExchangeData: {
    methodKind: "server_streaming";
    input: typeof StreamRequestSchema;
    output: typeof ExchangeDataUpdateSchema;
  },
  /**
   * Enhanced heartbeat with session status information
   *
   * @generated from rpc session_exchange.SessionExchangeSimulator.Heartbeat
   */
  heartbeat: {
    methodKind: "unary";
    input: typeof HeartbeatRequestSchema;
    output: typeof HeartbeatResponseSchema;
  },
  /**
   * Health check with service and user status
   *
   * @generated from rpc session_exchange.SessionExchangeSimulator.GetHealth
   */
  getHealth: {
    methodKind: "unary";
    input: typeof HealthRequestSchema;
    output: typeof HealthResponseSchema;
  },
  /**
   * New: Get session connection status for a user
   *
   * @generated from rpc session_exchange.SessionExchangeSimulator.GetSessionStatus
   */
  getSessionStatus: {
    methodKind: "unary";
    input: typeof SessionStatusRequestSchema;
    output: typeof SessionStatusResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_main_services_session_exchange_interface, 0);

