-- source/db/schemas/create_tables.sql
-- PostgreSQL schema for simulation data

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create enum types
CREATE TYPE order_side AS ENUM ('BUY', 'SELL');
CREATE TYPE order_type AS ENUM ('MARKET', 'LIMIT', 'TWAP', 'VWAP');
CREATE TYPE trade_side AS ENUM ('BUY', 'SELL');

-- Users table (if not exists)
CREATE TABLE IF NOT EXISTS users (
    user_id VARCHAR(50) PRIMARY KEY,
    username VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Trades table
CREATE TABLE IF NOT EXISTS trades (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id VARCHAR(50) NOT NULL REFERENCES users(user_id),
    simulation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Trade fields
    start_timestamp TIMESTAMP WITH TIME ZONE,
    end_timestamp TIMESTAMP WITH TIME ZONE,
    trade_id VARCHAR(100) NOT NULL,
    order_id VARCHAR(100) NOT NULL,
    cl_order_id VARCHAR(100),
    symbol VARCHAR(20) NOT NULL,
    side trade_side NOT NULL,
    currency VARCHAR(3) NOT NULL,
    price DECIMAL(15, 6) NOT NULL,
    quantity DECIMAL(15, 6) NOT NULL,
    detail TEXT,
    
    -- Indexes
    UNIQUE(user_id, trade_id, simulation_timestamp)
);

-- Portfolio table
CREATE TABLE IF NOT EXISTS portfolio (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id VARCHAR(50) NOT NULL REFERENCES users(user_id),
    simulation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Portfolio fields
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    symbol VARCHAR(20) NOT NULL,
    quantity DECIMAL(15, 6) NOT NULL,
    target_quantity DECIMAL(15, 6) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    avg_price DECIMAL(15, 6) NOT NULL,
    mtm_value DECIMAL(15, 6) NOT NULL,
    sod_realized_pnl DECIMAL(15, 6) DEFAULT 0,
    itd_realized_pnl DECIMAL(15, 6) DEFAULT 0,
    realized_pnl DECIMAL(15, 6) DEFAULT 0,
    unrealized_pnl DECIMAL(15, 6) DEFAULT 0,
    
    -- Indexes
    UNIQUE(user_id, symbol, simulation_timestamp)
);

-- Orders table
CREATE TABLE IF NOT EXISTS orders (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id VARCHAR(50) NOT NULL REFERENCES users(user_id),
    simulation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Order fields
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    event_type VARCHAR(50) NOT NULL,
    order_id VARCHAR(100) NOT NULL,
    cl_order_id VARCHAR(100),
    symbol VARCHAR(20) NOT NULL,
    side order_side NOT NULL,
    original_qty DECIMAL(15, 6) NOT NULL,
    remaining_qty DECIMAL(15, 6) NOT NULL,
    completed_qty DECIMAL(15, 6) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    price DECIMAL(15, 6),
    order_type order_type NOT NULL,
    participation_rate DECIMAL(5, 4),
    
    -- Indexes
    UNIQUE(user_id, order_id, simulation_timestamp, event_type)
);

-- Risk table
CREATE TABLE IF NOT EXISTS risk (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id VARCHAR(50) NOT NULL REFERENCES users(user_id),
    simulation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Risk fields
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    symbol VARCHAR(20) NOT NULL,
    position DECIMAL(15, 6) NOT NULL,
    target_position DECIMAL(15, 6) NOT NULL,
    market_value DECIMAL(15, 6) NOT NULL,
    unrealized_pnl DECIMAL(15, 6) NOT NULL,
    realized_pnl DECIMAL(15, 6) NOT NULL,
    volume DECIMAL(15, 6),
    vwap DECIMAL(15, 6),
    
    -- Indexes
    UNIQUE(user_id, symbol, simulation_timestamp)
);

-- Cash flows table
CREATE TABLE IF NOT EXISTS cash_flows (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id VARCHAR(50) NOT NULL REFERENCES users(user_id),
    simulation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Cash flow fields
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    symbol VARCHAR(20) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    cash_flow DECIMAL(15, 6) NOT NULL,
    cumulative_cash_flow DECIMAL(15, 6) NOT NULL,
    flow_type VARCHAR(50) NOT NULL,
    
    -- Indexes
    UNIQUE(user_id, symbol, simulation_timestamp)
);

-- Accounts table
CREATE TABLE IF NOT EXISTS accounts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id VARCHAR(50) NOT NULL REFERENCES users(user_id),
    simulation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Account fields
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    currency VARCHAR(3) NOT NULL,
    cash_balance DECIMAL(15, 6) NOT NULL,
    nav DECIMAL(15, 6) NOT NULL,
    
    -- Indexes
    UNIQUE(user_id, currency, simulation_timestamp)
);

-- Returns table
CREATE TABLE IF NOT EXISTS returns (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id VARCHAR(50) NOT NULL REFERENCES users(user_id),
    simulation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Returns fields
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    symbol VARCHAR(20) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    period_return DECIMAL(15, 6) NOT NULL,
    cumulative_return DECIMAL(15, 6) NOT NULL,
    
    -- Indexes
    UNIQUE(user_id, symbol, simulation_timestamp)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_trades_user_symbol ON trades(user_id, symbol, simulation_timestamp);
CREATE INDEX IF NOT EXISTS idx_trades_timestamp ON trades(simulation_timestamp);
CREATE INDEX IF NOT EXISTS idx_portfolio_user_symbol ON portfolio(user_id, symbol, simulation_timestamp);
CREATE INDEX IF NOT EXISTS idx_portfolio_timestamp ON portfolio(simulation_timestamp);
CREATE INDEX IF NOT EXISTS idx_orders_user_symbol ON orders(user_id, symbol, simulation_timestamp);
CREATE INDEX IF NOT EXISTS idx_orders_timestamp ON orders(simulation_timestamp);
CREATE INDEX IF NOT EXISTS idx_risk_user_symbol ON risk(user_id, symbol, simulation_timestamp);
CREATE INDEX IF NOT EXISTS idx_risk_timestamp ON risk(simulation_timestamp);

-- Create default user if not exists
INSERT INTO users (user_id, username) 
VALUES ('DEFAULT_USER', 'default_user')
ON CONFLICT (user_id) DO NOTHING;

-- Views for easy querying
CREATE OR REPLACE VIEW latest_portfolio AS
SELECT DISTINCT ON (user_id, symbol) *
FROM portfolio
ORDER BY user_id, symbol, simulation_timestamp DESC;

CREATE OR REPLACE VIEW latest_risk AS
SELECT DISTINCT ON (user_id, symbol) *
FROM risk
ORDER BY user_id, symbol, simulation_timestamp DESC;

-- Functions for data cleanup
CREATE OR REPLACE FUNCTION cleanup_old_data(days_to_keep INTEGER DEFAULT 30)
RETURNS INTEGER AS $$
DECLARE
    cutoff_date TIMESTAMP WITH TIME ZONE;
    deleted_count INTEGER := 0;
BEGIN
    cutoff_date := CURRENT_TIMESTAMP - INTERVAL '1 day' * days_to_keep;
    
    DELETE FROM trades WHERE created_at < cutoff_date;
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    
    DELETE FROM portfolio WHERE created_at < cutoff_date;
    DELETE FROM orders WHERE created_at < cutoff_date;
    DELETE FROM risk WHERE created_at < cutoff_date;
    DELETE FROM cash_flows WHERE created_at < cutoff_date;
    DELETE FROM accounts WHERE created_at < cutoff_date;
    DELETE FROM returns WHERE created_at < cutoff_date;
    
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;