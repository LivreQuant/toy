# k8s/config/db-schemas-auth.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-schemas-auth
data:
  extensions.sql: |
    -- PostgreSQL Extensions
    CREATE EXTENSION IF NOT EXISTS pgcrypto;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
  
  users.sql: |
    -- Users Schema
    CREATE SCHEMA IF NOT EXISTS auth;
    
    CREATE TABLE IF NOT EXISTS auth.users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE,
        password_hash VARCHAR(255) NOT NULL,
        email_verified BOOLEAN DEFAULT FALSE,
        verification_code VARCHAR(255),
        verification_sent_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        last_login TIMESTAMP WITH TIME ZONE,
        is_active BOOLEAN DEFAULT TRUE,
        user_role VARCHAR(20) DEFAULT 'user' CHECK (user_role IN ('admin', 'user', 'demo'))
    );
    
    -- Add indexes
    CREATE INDEX IF NOT EXISTS idx_users_username ON auth.users(username);
    CREATE INDEX IF NOT EXISTS idx_users_email ON auth.users(email);
    CREATE INDEX IF NOT EXISTS idx_users_role ON auth.users(user_role);
        
    -- Function to hash passwords
    CREATE OR REPLACE FUNCTION auth.hash_password(password TEXT)
    RETURNS TEXT AS $$
    BEGIN
        RETURN encode(digest(password || 'trading-simulator-salt', 'sha256'), 'hex');
    END;
    $$ LANGUAGE plpgsql;

    -- Function to verify passwords
    CREATE OR REPLACE FUNCTION auth.verify_password(p_username TEXT, p_password TEXT)
    RETURNS TABLE(
        id INTEGER,
        username VARCHAR(50),
        email VARCHAR(100),
        password_hash VARCHAR(255),
        email_verified BOOLEAN,
        is_active BOOLEAN,
        user_role VARCHAR(20)
    ) AS $$
    BEGIN
        RETURN QUERY
        SELECT u.id, u.username, u.email, u.password_hash, u.email_verified, u.is_active, u.user_role
        FROM auth.users u
        WHERE u.username = p_username
        AND u.password_hash = encode(digest(p_password || 'trading-simulator-salt', 'sha256'), 'hex');
    END;
    $$ LANGUAGE plpgsql;
    
    -- Grant permissions to opentp user
    GRANT USAGE ON SCHEMA auth TO opentp;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA auth TO opentp;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA auth TO opentp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA auth GRANT ALL ON TABLES TO opentp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA auth GRANT ALL ON SEQUENCES TO opentp;
  
  auth_tokens.sql: |
    -- Token management
    CREATE TABLE IF NOT EXISTS auth.refresh_tokens (
      id SERIAL PRIMARY KEY,
      user_id INTEGER NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
      token_hash TEXT NOT NULL,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
      expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
      is_revoked BOOLEAN DEFAULT FALSE,
      CONSTRAINT unique_token UNIQUE (token_hash)
    );
    
    -- Add indexes for performance
    CREATE INDEX IF NOT EXISTS idx_refresh_token_hash ON auth.refresh_tokens(token_hash);
    CREATE INDEX IF NOT EXISTS idx_refresh_token_user_id ON auth.refresh_tokens(user_id);
    
    -- Create cleanup function
    CREATE OR REPLACE FUNCTION auth.cleanup_expired_tokens()
    RETURNS void AS $$
    BEGIN
      DELETE FROM auth.refresh_tokens 
      WHERE expires_at < NOW() OR is_revoked = TRUE;
    END;
    $$ LANGUAGE plpgsql;

    -- Grant permissions on the refresh_tokens table
    GRANT ALL PRIVILEGES ON TABLE auth.refresh_tokens TO opentp;
  
  password_reset.sql: |
    -- Password Reset Tokens Table
    CREATE TABLE IF NOT EXISTS auth.password_reset_tokens (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
        token_hash TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        is_used BOOLEAN DEFAULT FALSE,
        CONSTRAINT unique_reset_token UNIQUE (token_hash)
    );
    
    -- Add indexes for performance
    CREATE INDEX IF NOT EXISTS idx_reset_token_hash ON auth.password_reset_tokens(token_hash);
    CREATE INDEX IF NOT EXISTS idx_reset_token_user_id ON auth.password_reset_tokens(user_id);
    
    -- Create cleanup function
    CREATE OR REPLACE FUNCTION auth.cleanup_expired_reset_tokens()
    RETURNS void AS $$
    BEGIN
      DELETE FROM auth.password_reset_tokens 
      WHERE expires_at < NOW() OR is_used = TRUE;
    END;
    $$ LANGUAGE plpgsql;
    
    -- Create password reset token function
    CREATE OR REPLACE FUNCTION auth.create_password_reset_token(
        p_user_id INTEGER, 
        p_token_hash TEXT, 
        p_expires_at TIMESTAMP WITH TIME ZONE
    ) RETURNS BOOLEAN AS $$
    BEGIN
        -- Delete any existing tokens for this user
        DELETE FROM auth.password_reset_tokens 
        WHERE user_id = p_user_id;
        
        -- Insert new token
        INSERT INTO auth.password_reset_tokens (user_id, token_hash, expires_at)
        VALUES (p_user_id, p_token_hash, p_expires_at);
        
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN FALSE;
    END;
    $$ LANGUAGE plpgsql;
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON TABLE auth.password_reset_tokens TO opentp;
  
  user_feedback.sql: |
    -- User Feedback Table
    CREATE TABLE IF NOT EXISTS auth.user_feedback (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES auth.users(id) ON DELETE SET NULL,
        feedback_type VARCHAR(50) NOT NULL DEFAULT 'general',
        title VARCHAR(200),
        content TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        status VARCHAR(20) DEFAULT 'new',
        reviewed_by INTEGER REFERENCES auth.users(id) ON DELETE SET NULL,
        reviewed_at TIMESTAMP WITH TIME ZONE
    );
    
    -- Add indexes for performance
    CREATE INDEX IF NOT EXISTS idx_feedback_user_id ON auth.user_feedback(user_id);
    CREATE INDEX IF NOT EXISTS idx_feedback_type ON auth.user_feedback(feedback_type);
    CREATE INDEX IF NOT EXISTS idx_feedback_status ON auth.user_feedback(status);
    CREATE INDEX IF NOT EXISTS idx_feedback_created_at ON auth.user_feedback(created_at);
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON TABLE auth.user_feedback TO opentp;
  