# k8s/config/db-schemas-crypto.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-schemas-crypto
data:
  crypto.sql: |
    -- Crypto Schema
    CREATE SCHEMA IF NOT EXISTS crypto;

    -- User-Wallet relationship table
    CREATE TABLE crypto.wallets (
      user_id UUID NOT NULL REFERENCES auth.users(user_id) ON DELETE CASCADE,
      fund_id UUID NOT NULL REFERENCES fund.funds(fund_id) ON DELETE CASCADE,
      address TEXT NOT NULL,
      mnemonic TEXT NOT NULL,
      mnemonic_salt TEXT NOT NULL,
      active_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
      expire_at TIMESTAMP WITH TIME ZONE DEFAULT '2999-01-01',
      PRIMARY KEY (user_id, fund_id),
      UNIQUE(address)
    );

    CREATE INDEX IF NOT EXISTS idx_crypto_wallets_user_id ON crypto.wallets(user_id);
    CREATE INDEX IF NOT EXISTS idx_crypto_wallets_fund_id ON crypto.wallets(fund_id);

    -- Contracts table
    CREATE TABLE crypto.contracts (
      user_id UUID NOT NULL REFERENCES auth.users(user_id) ON DELETE CASCADE,
      book_id UUID NOT NULL REFERENCES fund.books(book_id) ON DELETE CASCADE,
      app_id TEXT NOT NULL,
      app_address TEXT NOT NULL,
      parameters TEXT,
      status VARCHAR(50) NOT NULL DEFAULT 'ACTIVE',
      blockchain_status VARCHAR(50) NOT NULL DEFAULT 'Active',
      active_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
      expire_at TIMESTAMP WITH TIME ZONE DEFAULT '2999-01-01',
      deleted_at TIMESTAMP WITH TIME ZONE,
      deletion_note TEXT,
      PRIMARY KEY (app_id), -- Make app_id the primary key
      UNIQUE(user_id, book_id, expire_at) -- Only one active contract per user/book
    );

    CREATE INDEX IF NOT EXISTS idx_crypto_contracts_user_id ON crypto.contracts(user_id);
    CREATE INDEX IF NOT EXISTS idx_crypto_contracts_book_id ON crypto.contracts(book_id);
    CREATE INDEX IF NOT EXISTS idx_crypto_contracts_app_address ON crypto.contracts(app_address);
    CREATE INDEX IF NOT EXISTS idx_crypto_contracts_expire_at ON crypto.contracts(expire_at);
    CREATE INDEX IF NOT EXISTS idx_crypto_contracts_active ON crypto.contracts(user_id, book_id, expire_at);

    -- Transactions table
    CREATE TABLE crypto.txs (
      user_id UUID NOT NULL REFERENCES auth.users(user_id),
      book_id UUID NOT NULL REFERENCES fund.books(book_id),
      app_id TEXT NOT NULL REFERENCES crypto.contracts(app_id) ON DELETE CASCADE, -- Fixed: TEXT not UUID
      tx_id TEXT NOT NULL, -- Your nomenclature: tx_id not transaction_id
      date TIMESTAMP WITH TIME ZONE NOT NULL,
      sender TEXT NOT NULL,
      action VARCHAR(50) NOT NULL,
      g_user_id VARCHAR(255),
      g_book_id VARCHAR(255),
      g_status VARCHAR(50),
      g_params VARCHAR(255),
      l_book_hash VARCHAR(255),
      l_research_hash VARCHAR(255),
      l_params VARCHAR(255),
      created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
      PRIMARY KEY (tx_id) -- tx_id is the primary key
    );

    -- Supplemental table
    CREATE TABLE crypto.supplemental (
      user_id UUID NOT NULL REFERENCES auth.users(user_id),
      fund_id UUID NOT NULL REFERENCES fund.funds(fund_id),
      app_id TEXT NOT NULL REFERENCES crypto.contracts(app_id) ON DELETE CASCADE, -- Fixed: TEXT not UUID
      tx_id TEXT NOT NULL REFERENCES crypto.txs(tx_id) ON DELETE CASCADE, -- Fixed: TEXT not UUID
      date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), -- Added missing date field
      conviction_file_path TEXT,
      conviction_file_encoded TEXT,
      research_file_path TEXT,
      research_file_encoded TEXT,
      notes TEXT,
      notes_encoded TEXT,
      PRIMARY KEY (tx_id) -- tx_id is the primary key
    );

    -- Indexes for crypto.txs
    CREATE INDEX IF NOT EXISTS idx_crypto_txs_user_id ON crypto.txs(user_id);
    CREATE INDEX IF NOT EXISTS idx_crypto_txs_book_id ON crypto.txs(book_id);
    CREATE INDEX IF NOT EXISTS idx_crypto_txs_app_id ON crypto.txs(app_id);
    CREATE INDEX IF NOT EXISTS idx_crypto_txs_date ON crypto.txs(date);

    -- Indexes for crypto.supplemental
    CREATE INDEX IF NOT EXISTS idx_crypto_supplemental_user_id ON crypto.supplemental(user_id);
    CREATE INDEX IF NOT EXISTS idx_crypto_supplemental_fund_id ON crypto.supplemental(fund_id);
    CREATE INDEX IF NOT EXISTS idx_crypto_supplemental_app_id ON crypto.supplemental(app_id);
    CREATE INDEX IF NOT EXISTS idx_crypto_supplemental_date ON crypto.supplemental(date);
        
    -- Grant permissions
    GRANT USAGE ON SCHEMA crypto TO opentp;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA crypto TO opentp;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA crypto TO opentp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA crypto GRANT ALL ON TABLES TO opentp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA crypto GRANT ALL ON SEQUENCES TO opentp;