# k8s/config/db-schemas-fund.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-schemas-fund
data:
  funds.sql: |
    -- Fund Schema
    CREATE SCHEMA IF NOT EXISTS fund;

    -- User (Fund) table - Each user_id represents a fund entity
    CREATE TABLE fund.funds (
        fund_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        status VARCHAR(50) NOT NULL DEFAULT 'active',  -- active, archived, pending
        created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        user_id UUID NOT NULL REFERENCES auth.users(user_id) ON DELETE CASCADE UNIQUE  -- One-to-one with auth.users
    );

    -- Fund properties using EAV (Entity-Attribute-Value) model for flexibility
    CREATE TABLE fund.properties (
        fund_id UUID NOT NULL REFERENCES fund.funds(fund_id) ON DELETE CASCADE,
        category VARCHAR(100) NOT NULL,  -- e.g., 'general', 'strategy', 'team', 'compliance'
        subcategory VARCHAR(100) NOT NULL, -- e.g., 'legalStructure', 'investmentThesis', 'teamMemberRole'
        key VARCHAR(100) NOT NULL,  -- For array items like 'objective[0]', 'objective[1]'
        value TEXT,  -- Using TEXT for maximum flexibility
        created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        PRIMARY KEY (fund_id, category, subcategory, key)
    );

    -- Fund team members table - Each fund can have multiple team members
    CREATE TABLE fund.team_members (
        team_member_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        fund_id UUID NOT NULL REFERENCES fund.funds(fund_id) ON DELETE CASCADE,
        status VARCHAR(50) NOT NULL DEFAULT 'active',  -- active, inactive
        created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
    );

    -- Fund team member properties using EAV model
    CREATE TABLE fund.team_member_properties (
        member_id UUID NOT NULL REFERENCES fund.team_members(team_member_id) ON DELETE CASCADE,
        category VARCHAR(100) NOT NULL,  -- e.g., 'personal', 'professional', 'education'
        subcategory VARCHAR(100) NOT NULL, -- e.g., 'name', 'contact', 'experience'
        key VARCHAR(100) NOT NULL,  -- e.g., 'first_name', 'last_name', 'email', 'phone', 'linkedin'
        value TEXT,
        created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        PRIMARY KEY (member_id, category, subcategory, key)
    );

    -- Create books table
    CREATE TABLE fund.books (
        book_id UUID PRIMARY KEY,
        user_id UUID NOT NULL,
        name VARCHAR(255) NOT NULL,
        status VARCHAR(50) DEFAULT 'active',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Create book properties table with a more flexible structure
    CREATE TABLE fund.book_properties (
        property_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        book_id UUID NOT NULL REFERENCES fund.books(book_id) ON DELETE CASCADE,
        category VARCHAR(100) NOT NULL,
        subcategory VARCHAR(100) DEFAULT '',
        key VARCHAR(100) NOT NULL,
        value TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Fund portfolios (smart contracts) table - One-to-many relationship with fund
    CREATE TABLE fund.portfolios (
        portfolio_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        fund_id UUID NOT NULL REFERENCES fund.funds(fund_id) ON DELETE CASCADE,
        book_id VARCHAR(255) NOT NULL,
        app_id VARCHAR(255) NOT NULL,
        app_address VARCHAR(255) NOT NULL,
        parameters TEXT,
        status VARCHAR(50) NOT NULL DEFAULT 'ACTIVE',
        blockchain_status VARCHAR(50) NOT NULL DEFAULT 'Active',
        created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        deletion_timestamp TIMESTAMP WITH TIME ZONE,
        deletion_note TEXT,
        UNIQUE(fund_id, book_id)
    );

    -- Create indexes for performance
    CREATE INDEX idx_fund_funds_user_id ON fund.funds(user_id);
    CREATE INDEX idx_fund_properties_lookup ON fund.properties(fund_id, category, subcategory);
    CREATE INDEX idx_fund_team_members_fund ON fund.team_members(fund_id);
    CREATE INDEX idx_fund_team_member_properties_lookup ON fund.team_member_properties(member_id, category, subcategory);

    CREATE INDEX idx_book_properties_book_id ON fund.book_properties(book_id);
    CREATE INDEX idx_book_properties_category ON fund.book_properties(category);

    CREATE INDEX idx_fund_portfolios_fund ON fund.portfolios(fund_id);
    CREATE INDEX idx_fund_portfolios_book_id ON fund.portfolios(book_id);

    -- Grant permissions
    GRANT USAGE ON SCHEMA fund TO opentp;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA fund TO opentp;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA fund TO opentp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA fund GRANT ALL ON TABLES TO opentp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA fund GRANT ALL ON SEQUENCES TO opentp;
    