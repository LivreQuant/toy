# k8s/config/db-schemas-session.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-schemas-session
data:
  sessions.sql: |
    -- Session Schema
    CREATE SCHEMA IF NOT EXISTS session;
    
    CREATE TABLE IF NOT EXISTS session.active_sessions (
      session_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
      user_id UUID NOT NULL REFERENCES auth.users(user_id) ON DELETE CASCADE,
      book_id UUID NOT NULL,
      status TEXT NOT NULL,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
      last_active TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
      expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
      token TEXT
    );
    
    -- Add indexes
    CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON session.active_sessions(user_id);
    CREATE INDEX IF NOT EXISTS idx_sessions_expires_at ON session.active_sessions(expires_at);
    
    -- Create session metadata table
    CREATE TABLE session.session_details (
      session_id UUID PRIMARY KEY REFERENCES session.active_sessions(session_id) ON DELETE CASCADE,
            
      -- Device and connection information
      device_id VARCHAR(64),
      user_agent TEXT,
      ip_address VARCHAR(45),  -- Supports IPv6
      pod_name VARCHAR(255),
      
      -- Status and quality metrics
      connection_quality VARCHAR(20) CHECK (connection_quality IN ('good', 'degraded', 'poor')),
      heartbeat_latency INTEGER,
      missed_heartbeats INTEGER DEFAULT 0,
      reconnect_count INTEGER DEFAULT 0,
              
      -- Timestamps
      last_reconnect TIMESTAMP WITH TIME ZONE,
      last_device_update TIMESTAMP WITH TIME ZONE,
      last_quality_update TIMESTAMP WITH TIME ZONE
    );

    -- Index for faster lookups
    CREATE INDEX idx_session_details_device_id ON session.session_details(device_id);
    
    -- Create cleanup function for expired sessions
    CREATE OR REPLACE FUNCTION session.cleanup_expired_sessions() 
    RETURNS INTEGER AS $$
    DECLARE
        deleted_count INTEGER;
    BEGIN
        DELETE FROM session.active_sessions
        WHERE expires_at < NOW();
        
        GET DIAGNOSTICS deleted_count = ROW_COUNT;
        RETURN deleted_count;
    END;
    $$ LANGUAGE plpgsql;
    
    -- Grant permissions for session schema
    GRANT USAGE ON SCHEMA session TO opentp;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA session TO opentp;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA session TO opentp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA session GRANT ALL ON TABLES TO opentp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA session GRANT ALL ON SEQUENCES TO opentp;
