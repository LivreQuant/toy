# k8s/jobs/db-init-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init-job
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      containers:
      - name: db-init
        image: postgres:13
        command:
          - "/bin/bash"
          - "-c"
          - |
            echo "Starting database initialization..."
            
            # Debug: List all mounted volumes and their contents
            echo "DEBUG: Listing all mounted volumes:"
            ls -la /schemas-auth/ || echo "No schemas-auth directory"
            ls -la /schemas-session/ || echo "No schemas-session directory"
            ls -la /schemas-fund/ || echo "No schemas-fund directory" 
            ls -la /schemas-crypto/ || echo "No schemas-crypto directory"
            ls -la /schemas/ || echo "No schemas directory"
            
            # Wait for database to be fully ready
            until PGPASSWORD=$(cat /db-credentials/password) psql -h postgres -U $(cat /db-credentials/username) -d opentp -c "SELECT 1" > /dev/null 2>&1; do
              echo "Waiting for PostgreSQL to be ready..."
              sleep 2
            done
            
            
            # CRITICAL FIX: Create extensions first - directly, no files
            echo "Creating required extensions..."
            PGPASSWORD=$(cat /db-credentials/password) psql -h postgres -U $(cat /db-credentials/username) -d opentp -c "
            CREATE EXTENSION IF NOT EXISTS pgcrypto;
            CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
            
            if [ $? -ne 0 ]; then
              echo "CRITICAL ERROR: Failed to create extensions. Cannot proceed."
              exit 1
            else
              echo "Successfully created extensions."
            fi
            
            # Now continue with schema creation
            echo "Applying auth schema files..."
            for schema in users.sql auth_tokens.sql password_reset.sql user_feedback.sql; do
              echo "Applying $schema..."
              if [ -f "/schemas-auth/$schema" ]; then
                PGPASSWORD=$(cat /db-credentials/password) psql -h postgres -U $(cat /db-credentials/username) -d opentp -f /schemas-auth/$schema
                if [ $? -ne 0 ]; then
                  echo "Error applying $schema"
                  exit 1
                fi
              else
                echo "WARNING: File /schemas-auth/$schema not found"
              fi
            done
            
            echo "Applying auth schema files..."
            for schema in users.sql auth_tokens.sql password_reset.sql user_feedback.sql; do
              echo "Applying $schema..."
              if [ -f "/schemas-auth/$schema" ]; then
                PGPASSWORD=$(cat /db-credentials/password) psql -h postgres -U $(cat /db-credentials/username) -d opentp -f /schemas-auth/$schema
                if [ $? -ne 0 ]; then
                  echo "Error applying $schema"
                  exit 1
                fi
              else
                echo "WARNING: File /schemas-auth/$schema not found"
              fi
            done

            echo "Applying fund schema files..."
            for schema in funds.sql; do
              echo "Applying $schema..."
              if [ -f "/schemas-fund/$schema" ]; then
                PGPASSWORD=$(cat /db-credentials/password) psql -h postgres -U $(cat /db-credentials/username) -d opentp -f /schemas-fund/$schema
                if [ $? -ne 0 ]; then
                  echo "Error applying $schema"
                  exit 1
                fi
              else
                echo "WARNING: File /schemas-fund/$schema not found"
              fi
            done

            echo "Applying session schema files..."
            for schema in sessions.sql market_data.sql simulator_sessions.sql trading.sql; do
              echo "Applying $schema..."
              if [ -f "/schemas-session/$schema" ]; then
                PGPASSWORD=$(cat /db-credentials/password) psql -h postgres -U $(cat /db-credentials/username) -d opentp -f /schemas-session/$schema
                if [ $? -ne 0 ]; then
                  echo "Error applying $schema"
                  exit 1
                fi
              else
                echo "WARNING: File /schemas-session/$schema not found"
              fi
            done

            echo "Applying crypto schema files..."
            for schema in crypto.sql; do
              echo "Applying $schema..."
              if [ -f "/schemas-crypto/$schema" ]; then
                PGPASSWORD=$(cat /db-credentials/password) psql -h postgres -U $(cat /db-credentials/username) -d opentp -f /schemas-crypto/$schema
                if [ $? -ne 0 ]; then
                  echo "Error applying $schema"
                  exit 1
                fi
              else
                echo "WARNING: File /schemas-crypto/$schema not found"
              fi
            done
            
            # Verify the function exists
            echo "Verifying session.cleanup_expired_sessions exists..."
            func_exists=$(PGPASSWORD=$(cat /db-credentials/password) psql -h postgres -U $(cat /db-credentials/username) -d opentp -t -c "SELECT COUNT(*) FROM pg_proc JOIN pg_namespace ON pg_namespace.oid = pg_proc.pronamespace WHERE proname = 'cleanup_expired_sessions' AND nspname = 'session'")
            if [ "$func_exists" -eq "0" ]; then
              echo "Function session.cleanup_expired_sessions not found, creating it..."
              PGPASSWORD=$(cat /db-credentials/password) psql -h postgres -U $(cat /db-credentials/username) -d opentp -c "
              CREATE SCHEMA IF NOT EXISTS session;
              CREATE OR REPLACE FUNCTION session.cleanup_expired_sessions() 
              RETURNS INTEGER AS \$\$
              DECLARE
                  deleted_count INTEGER;
              BEGIN
                  DELETE FROM session.active_sessions
                  WHERE expires_at < NOW();
                  
                  GET DIAGNOSTICS deleted_count = ROW_COUNT;
                  RETURN deleted_count;
              END;
              \$\$ LANGUAGE plpgsql;"
            fi
                        
            echo "Database initialization completed successfully."
        volumeMounts:
        - name: db-schemas-auth
          mountPath: /schemas-auth
        - name: db-schemas-fund
          mountPath: /schemas-fund
        - name: db-schemas-session
          mountPath: /schemas-session
        - name: db-schemas-crypto
          mountPath: /schemas-crypto
        - name: db-credentials
          mountPath: /db-credentials
          readOnly: true
      volumes:
      - name: db-schemas-auth
        configMap:
          name: db-schemas-auth
      - name: db-schemas-fund
        configMap:
          name: db-schemas-fund
      - name: db-schemas-session
        configMap:
          name: db-schemas-session
      - name: db-schemas-crypto
        configMap:
          name: db-schemas-crypto
      - name: db-credentials
        secret:
          secretName: db-credentials
      restartPolicy: OnFailure