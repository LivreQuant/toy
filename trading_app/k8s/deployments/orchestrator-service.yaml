# k8s/deployments/orchestrator-service.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orchestrator-service
  labels:
    app: orchestrator-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orchestrator-service
  template:
    metadata:
      labels:
        app: orchestrator-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: orchestrator-service-account
      initContainers:
      - name: wait-for-db
        image: postgres:13
        command: ['sh', '-c', 'until pg_isready -h pgbouncer -p 5432; do echo waiting for database; sleep 2; done;']
      
      containers:
      - name: orchestrator-service
        image: opentp/orchestrator-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
          name: http
        env:
        # Database configuration
        - name: DB_HOST
          value: pgbouncer
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: opentp
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        
        # Orchestrator configuration
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CHECK_INTERVAL_SECONDS
          value: "60"
        - name: STARTUP_BUFFER_MINUTES
          value: "5"
        - name: SHUTDOWN_BUFFER_MINUTES
          value: "5"
        - name: LOG_LEVEL
          value: "INFO"
        
        # Pod info
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator-service
  labels:
    app: orchestrator-service
spec:
  selector:
    app: orchestrator-service
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  type: ClusterIP